{"version":3,"file":"authorform.min.js","sources":["../src/authorform.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for handling UI actions in the question authoring form.\n *\n * @module qtype_coderunner/authorform\n * @copyright  Richard Lobb, 2015, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'qtype_coderunner/userinterfacewrapper', 'core/str'], function($, ui, str) {\n\n    // We need this to keep track of the current question type.\n    let currentQtype = \"\";\n\n    // Define a mapping from the fields of the JSON object returned by an AJAX\n    // 'get question type' request to the form elements. Only fields that\n    // belong to the question type should appear here. Keys are JSON field\n    // names, values are a 3- or 4-element array of: a jQuery form element selector;\n    // the element property to be set; a default value if the JSON field is\n    // empty and an optional filter function to apply to the field value before\n    // setting the property with it.\n    var JSON_TO_FORM_MAP = {\n        template:            ['#id_template', 'value', ''],\n        iscombinatortemplate:['#id_iscombinatortemplate', 'checked', '',\n                                function (value) {\n                                    return value === '1' ? true : false;\n                                }],  // Need nice clean boolean for 'checked' attribute.\n        cputimelimitsecs:    ['#id_cputimelimitsecs', 'value', ''],\n        memlimitmb:          ['#id_memlimitmb', 'value', ''],\n        sandbox:             ['#id_sandbox', 'value', 'DEFAULT'],\n        sandboxparams:       ['#id_sandboxparams', 'value', ''],\n        testsplitterre:      ['#id_testsplitterre', 'value', '',\n                                function (splitter) {\n                                    return splitter.replace('\\n', '\\\\n');\n                                }],\n        allowmultiplestdins: ['#id_allowmultiplestdins', 'checked', '',\n                                function (value) {\n                                    return value === '1' ? true : false;\n                                }],\n        grader:              ['#id_grader', 'value', 'EqualityGrader'],\n        resultcolumns:       ['#id_resultcolumns', 'value', ''],\n        language:            ['#id_language', 'value', ''],\n        acelang:             ['#id_acelang', 'value', ''],\n        uiplugin:            ['#id_uiplugin', 'value', 'ace']\n    };\n\n    /**\n     * Set up the author edit form UI plugins and event handlers.\n     * The template parameters and Ace language are passed to each\n     * text area from PHP by setting its data-params and\n     * data-lang attributes.\n     */\n    function initEditForm() {\n        var typeCombo = $('#id_coderunnertype'),\n            prototypeDisplay = $('#id_isprototype'),\n            template = $('#id_template'),\n            evaluatePerStudent = $('#id_templateparamsevalpertry'),\n            globalextra = $('#id_globalextra'),\n            prototypeextra = $('#id_prototypeextra'),\n            useace = $('#id_useace'),\n            language = $('#id_language'),\n            acelang = $('#id_acelang'),\n            customise = $('#id_customise'),\n            isCombinator = $('#id_iscombinatortemplate'),\n            testSplitterRe = $('#id_testsplitterre'),\n            allowMultipleStdins = $('#id_allowmultiplestdins'),\n            customisationFieldSet = $('#id_customisationheader'),\n            advancedCustomisation = $('#id_advancedcustomisationheader'),\n            isCustomised = customise.prop('checked'),\n            prototypeType = $('#id_prototypetype'),\n            preloadHdr = $('#id_answerpreloadhdr'),\n            courseId = $('input[name=\"courseid\"]').prop('value'),\n            questiontypeHelpDiv = $('#qtype-help'),\n            precheck = $('select#id_precheck'),\n            testtypedivs = $('div.testtype'),\n            testsection = $('#id_testcasehdr'),\n            brokenQuestion = $('#id_broken_question'),\n            badQuestionLoad = $('#id_bad_question_load'),\n            uiplugin = $('#id_uiplugin'),\n            uiparameters = $('#id_uiparameters');\n\n        /**\n         * Set up the UI controller for a given textarea (one of template,\n         * answer or answerpreload).\n         * We don't attempt to process changes in template parameters,\n         * as these need to be merged with those of the prototype. But we do handle\n         * changes in the language.\n         * @param {string} taId The ID of the textarea element.\n         * @param {string} uiname The name of the UI controller (may be empty or none).\n         */\n        function setUi(taId, uiname) {\n            var ta = $(document.getElementById(taId)),  // The jquery text area element(s).\n                lang,\n                currentLang = ta.attr('data-lang'),     // Language set by PHP.\n                paramsJson = ta.attr('data-params'),    // Ui params set by PHP.\n                params = {},\n                uiWrapper;\n\n            // Set data attributes in the text area for UI components that need\n            // global extra or testcase data (e.g. gapfiller UI).\n            ta.attr('data-prototypeextra', prototypeextra.val());\n            ta.attr('data-globalextra', globalextra.val());\n            ta.attr('data-test0', $('#id_testcode_0').val());\n            try {\n                params = JSON.parse(paramsJson);\n            } catch(err) {}\n            uiname = uiname.toLowerCase();\n            if (uiname === 'none') {\n                uiname = '';\n            }\n\n            if (taId == 'id_templateparams' || taId == 'id_uiparameters') {\n                lang = ''; // These fields may be twigged, so can't be parsed by Ace.\n            } else {\n                lang = language.prop('value');\n                if (taId !== \"id_template\" && acelang.prop('value')) {\n                    lang = preferredAceLang(acelang.prop('value'));\n                }\n            }\n\n            uiWrapper = ta.data('current-ui-wrapper'); // Currently-active UI wrapper on this ta.\n\n            if (uiWrapper && uiWrapper.uiname === uiname && currentLang == lang) {\n                return; // We already have what we want - give up.\n            }\n\n            ta.attr('data-lang', lang);\n\n            if (!uiWrapper) {\n                uiWrapper = new ui.InterfaceWrapper(uiname, taId);\n            } else {\n                // Wrapper has already been set up - just reload the reqd UI.\n                params.lang = lang;\n                uiWrapper.loadUi(uiname, params);\n            }\n\n        }\n\n        /**\n         * Set the correct Ui controller on both the sample answer and the answer preload.\n         * The sample answer and answer preload have the data-params attribute which contains\n         * the UI params in a JSON from the current question merged with the prototype.\n         * Both of them are identical and are changed simultaneously; only checking\n         * answer as state is identical.\n         * As a special case, we don't turn on the Ui controller in the answer\n         * and answer preload fields when using Html-Ui and the ui-parameter\n         * enable_in_editor is false.\n         *\n         */\n        function setUis() {\n            let uiname = uiplugin.val();\n            let answer = $('#id_answer');\n            let enableUi = true;\n            if (uiname === 'html' && answer.attr('data-params') !== '') {\n                try {\n                    let answerparams = JSON.parse(answer.attr('data-params'));\n                    if (answerparams.enable_in_editor === false) {\n                        enableUi = false;\n                    }\n                } catch (error) {\n                    alert(\"Invalid UI parameters.\");\n                }\n            }\n            if (enableUi) {\n                setUi('id_answer', uiname);\n                setUi('id_answerpreload', uiname);\n            }\n        }\n\n        /**\n         * Display or Hide all customisation parts of the form.\n         * @param {bool} isVisible True to show, false to hide.\n         */\n        function setCustomisationVisibility(isVisible) {\n            var display = isVisible ? 'block' : 'none';\n            customisationFieldSet.css('display', display);\n            advancedCustomisation.css('display', display);\n            if (isVisible && useace.prop('checked')) {\n                setUi('id_template', 'ace');\n            }\n        }\n\n\n        /**\n         * Turn on or off the Ace editor in the template and uiparameters fields\n         * so we can reload the textareas with JavaScript.\n         * Ignore if UseAce is unchecked.\n         * @param {bool} stateOn True to stop Ace, false to restart it.\n         */\n        function enableAceInCustomisedFields(stateOn) {\n            var taIds = ['id_template', 'id_uiparameters'];\n            var uiWrapper, ta;\n            if (useace.prop('checked')) {\n                for(var i = 0; i < taIds.length; i++) {\n                    ta = $(document.getElementById(taIds[i]));\n                    uiWrapper = ta.data('current-ui-wrapper');\n                    if (uiWrapper && stateOn) {\n                        uiWrapper.restart();\n                    } else if (uiWrapper && !stateOn) {\n                        uiWrapper.stop();\n                    }\n                }\n            }\n        }\n\n\n        /**\n         * After loading the form with new question type data we have to\n         * enable or disable both the testsplitterre and the allow multiple\n         * stdins field. These are subsequently enabled/disabled via event handlers\n         * set up by code in edit_coderunner_form.php (q.v.) but those event\n         * handlers do not handle the freshly downloaded state.\n         */\n        function enableTemplateSupportFields() {\n            var isCombinatorEnabled = isCombinator.prop('checked');\n\n            testSplitterRe.prop('disabled', !isCombinatorEnabled);\n            allowMultipleStdins.prop('disabled', !isCombinatorEnabled);\n        }\n\n        /**\n         * Copy fields from the AJAX \"get question type\" response into the form.\n         * @param {string} newType the newly selected question type.\n         * @param {object} response The AJAX resopnse.\n         */\n        function copyFieldsFromQuestionType(newType, response) {\n            var formspecifier, attrval, filter;\n\n            enableAceInCustomisedFields(false);\n            for (var key in JSON_TO_FORM_MAP) {\n                formspecifier = JSON_TO_FORM_MAP[key];\n                attrval = response[key] ? response[key] : formspecifier[2];\n                if (formspecifier.length > 3) {\n                    filter = formspecifier[3];\n                    attrval = filter(attrval);\n                }\n                $(formspecifier[0]).prop(formspecifier[1], attrval);\n            }\n\n            customise.prop('checked', false);\n            str.get_string('coderunner_question_type', 'qtype_coderunner').then(function (s) {\n                questiontypeHelpDiv.html(detailsHtml(newType, s, response.questiontext));\n            });\n\n            setCustomisationVisibility(false);\n            enableTemplateSupportFields();\n        }\n\n        /**\n         * A JSON request for a question type returned a 'failure' response - probably a\n         * missing question type. Report the error with an alert, and replace\n         * the template contents with an error message in case the user\n         * saves the question and later wonders why it breaks.\n         * Returns the JSON error object for further use.\n         * @param {string} questionType The CodeRunner (sub) question type.\n         * @param {string} error The error message as JSON encoded error => langstring,\n         * extra => components string.\n         * @return {JSON object} The JSON error object for further parsing.\n         */\n        function reportError(questionType, error) {\n            const errorObject = JSON.parse(error);\n            str.get_string('prototype_error', 'qtype_coderunner').then(function(s) {\n                str.get_string(errorObject.alert, 'qtype_coderunner', questionType).then(function(str) {\n                    langStringAlert('prototype_load_failure', str);\n                    let errorMessage = s + \"\\n\";\n                    errorMessage += str + '\\n';\n                    errorMessage += \"CourseId: \" + courseId + \", qtype: \" + questionType;\n                    template.prop('value', errorMessage);\n                });\n            });\n            return errorObject;\n        }\n\n        /**\n         * Local function to return the HTML to display in the\n         * question type details section of the form.\n         * @param {string} title The type of the question being described.\n         * @param {string} coderunner_descr The language string to introduce\n         * the detail.\n         * @param {html} html The HTML description of the question type, namely\n         * the question text from its prototype.\n         * @return {html} The composite HTML describing the question type.\n         */\n        function detailsHtml(title, coderunner_descr, html) {\n\n            var resultHtml = '<p class=\"question-type-details-header\">';\n            resultHtml += coderunner_descr;\n            resultHtml += title + '</p>\\n' + html;\n            return resultHtml;\n\n        }\n\n        /**\n         * Raise an alert with the given language string and possible additional\n         * extra text.\n         * @param {string} key The language string to put in the Alert.\n         * @param {string} extra Extra text to append.\n         */\n        function langStringAlert(key, extra) {\n            if (window.hasOwnProperty('behattesting') && window.behattesting) {\n                return;\n            }\n            str.get_string(key, 'qtype_coderunner').then(function(s) {\n                var message = s.replace(/\\n/g, \" \");\n                if (extra) {\n                    message += '\\n' + extra;\n                }\n                alert(message);\n            });\n        }\n\n        /**\n         * Get the \"preferred language\" from the AceLang string supplied.\n         * @param {string} acelang The AceLang string.\n         * For multilanguage questions, this is either the default (i.e.,\n         * the language with a '*' suffix), or the first language. Otherwise\n         * it is simply the entire AceLang string.\n         * @return {string} The language to pass to Ace for syntax highlighting.\n         */\n        function preferredAceLang(acelang) {\n            var langs, i;\n            if (acelang.indexOf(',') < 0) {\n                return acelang;\n            } else {\n                langs = acelang.split(',');\n                for (i = 0; i < langs.length; i++) {\n                    if (langs[i].endsWith('*')) {\n                        return langs[i].substr(0, langs[i].length - 1);\n                    }\n                }\n                return langs.length > 0 ? langs[0] : '';\n            }\n        }\n\n        /**\n         * Load the various customisation fields into the form from the\n         * CodeRunner question type currently selected by the combobox.\n         * Looks at the preexisting type of the selected field.\n         */\n        function loadCustomisationFields() {\n            let newType = typeCombo.children('option:selected').text();\n\n            if (newType !== '' && newType !== 'Undefined') {\n                // Prevent 'Undefined' ever being reselected.\n                typeCombo.children('option:first-child').prop('disabled', 'disabled');\n\n                // Load question type with ajax.\n                $.getJSON(M.cfg.wwwroot + '/question/type/coderunner/ajax.php',\n                    {\n                        qtype: newType,\n                        courseid: courseId,\n                        sesskey: M.cfg.sesskey\n                    },\n                    function (outcome) {\n                        // Clean all warnings regardless.\n                        $('#id_qtype_coderunner_warning_div').empty();\n                        if (outcome.success) {\n                            copyFieldsFromQuestionType(newType, outcome);\n                            setUis();\n                            loadUiParametersDescription();\n                            // Success, so remove the errors and change the current Qtype.\n                            currentQtype = newType;\n                            $('#id_qtype_coderunner_error_div').empty();\n                        }\n                        else {\n                            const errorObject = reportError(newType, outcome.error);\n                            // Checks to see if there has been a change in type from last saved.\n                            // If so, put up a load error and keep type unchanged.\n                            if (currentQtype !== newType && errorObject.error === 'duplicateprototype') {\n                                showLoadTypeError(currentQtype, errorObject, newType);\n                                $(\"#id_coderunnertype\").val(currentQtype);\n                            }\n                        }\n                    }\n                ).fail(function () {\n                    // AJAX failed. We're dead, Fred. The attempt to get the\n                    // language translation for the error message will likely\n                    // fail too, so use English for a start.\n                    langStringAlert('error_loading_prototype');\n                    template.prop('value', '*** AJAX ERROR. DON\\'T SAVE THIS! ***');\n                    str.get_string('ajax_error', 'qtype_coderunner').then(function(s) {\n                        template.prop('value', s);  // Translates into current language (if it works).\n                    });\n                });\n            }\n        }\n\n        /**\n         * Build an HTML table describing all the UI parameters.\n         * @param {object} uiParamInfo The object describing the parameters\n         * for a particular UI.\n         * @return {string} An HTML table describing each UI parameter.\n         */\n        function UiParameterDescriptionTable(uiParamInfo) {\n            var html = '<div class=\"uiparamtablediv\"><table class=\"uiparamtable\">\\n',\n                hdrs = uiParamInfo.columnheaders, param, i;\n            html += \"<tr><th>\" + hdrs[0] + \"</th><th>\" + hdrs[1] + \"</th><th>\" + hdrs[2] + \"</th></tr>\\n\";\n            for (i = 0; i < uiParamInfo.uiparamstable.length; i++) {\n                param = uiParamInfo.uiparamstable[i];\n                html += \"<tr><td>\" + param[0] + \"</td><td>\" + param[1] + \"</td><td>\" + param[2] + \"</td></tr>\\n\";\n            }\n            html += \"</table></div>\\n\";\n            return html;\n        }\n\n        /**\n         * Load the UI parameter description field by Ajax initially or\n         * when the UI plugin is changed.\n         */\n        function loadUiParametersDescription() {\n            let newUi = uiplugin.children('option:selected').text();\n            $.getJSON(M.cfg.wwwroot + '/question/type/coderunner/ajax.php',\n                {\n                    uiplugin: newUi,\n                    courseid: courseId,\n                    sesskey: M.cfg.sesskey\n                },\n                function (uiInfo) {\n                    var currentuiparameters = uiparameters.val(),\n                        paramDescriptionDiv = $('.ui_parameters_descr'),\n                        showhidebutton = $('<button type=\"button\" class=\"toggleuidetails\">' + uiInfo.showdetails + '</button>'),\n                        table;\n                    paramDescriptionDiv.empty();\n                    paramDescriptionDiv.append(uiInfo.header);\n                    if (uiInfo.uiparamstable.length == 0 && currentuiparameters.trim() === '') {\n                        uiparameters.val(''); // Remove stray white space.\n                        $('#fgroup_id_uiparametergroup').hide();\n                    } else {\n                        if (uiInfo.uiparamstable.length != 0) {\n                            paramDescriptionDiv.append(showhidebutton);\n                            table = $(UiParameterDescriptionTable(uiInfo));\n                            paramDescriptionDiv.append(table);\n                            table.hide();\n                            showhidebutton.click(function () {\n                                if (showhidebutton.html() == uiInfo.showdetails) {\n                                    table.show();\n                                    showhidebutton.html(uiInfo.hidedetails);\n                                } else {\n                                    table.hide();\n                                    showhidebutton.html(uiInfo.showdetails);\n                                }\n                            });\n                        }\n                        $('#fgroup_id_uiparametergroup').show();\n                        if (useace.prop('checked')) {\n                            setUi('id_uiparameters', 'ace');\n                        }\n                    }\n                }\n            ).fail(function () {\n                // AJAX failed.\n                langStringAlert('error_loading_ui_descr');\n            });\n        }\n\n        /**\n         * Show/hide all testtype divs in the testcases according to the\n         * 'Precheck' selector.\n         */\n        function set_testtype_visibilities() {\n            if (precheck.val() === '3') { // Show only for case of 'Selected'.\n                testtypedivs.show();\n            } else {\n                testtypedivs.hide();\n            }\n        }\n\n        /**\n         * Check that the Ace language is correctly set for the answer and\n         * answer preload fields.\n         */\n        function check_ace_lang() {\n            if (uiplugin.val() === 'ace'){\n                setUis();\n            }\n        }\n\n        /**\n         * Check that the Ace language is correctly set for the template,\n         * if template_uses_ace is checked.\n         */\n        function check_template_lang() {\n            if (useace.prop('checked')) {\n                setUi('id_template', 'ace');\n            }\n        }\n\n        /**\n         * If the brokenquestionmessage hidden element is not empty, insert the\n         * given message as an error at the top of the question.\n         * itself to go back to the last valid value.\n         */\n        function checkForBrokenQuestion() {\n            let brokenQuestionMessage = brokenQuestion.prop('value'),\n                messagePara = null;\n            if (brokenQuestionMessage !== '') {\n                messagePara = $('<p>' + brokenQuestion.prop('value') + '</p>');\n                $('#id_qtype_coderunner_error_div').append(messagePara);\n            }\n        }\n\n        /**\n         * Shows the load type error of the selected type if the selected type is\n         * faulty.\n         * @param {string} currentType The current type with its errors.\n         * @param {JSON Object} errorObject The JSON object containing a list of all the errors.\n         * @param {string} newType The new type string which it failed to load.\n         */\n        function showLoadTypeError(currentType, errorObject, newType) {\n            str.get_string('loadprototypeerror', 'qtype_coderunner',\n                { oldtype : currentType, crtype : newType, outputstring : errorObject.extras })\n                      .then(function(str) {\n                $('#id_qtype_coderunner_warning_div').append($('<p>' + str + '</p>'));\n            });\n        }\n\n        /*************************************************************\n         *\n         * Body of initEditFormWhenReady starts here.\n         *\n         *************************************************************/\n\n        if (prototypeType.prop('value') != 0) {\n            // Display the prototype warning if it's a prototype and hide testboxes.\n            testsection.css('display', 'none');\n            prototypeDisplay.removeAttr('hidden');\n            if (prototypeType.prop('value') == 1) {\n                // Editing a built-in question type: Dangerous!\n                str.get_string('proceed_at_own_risk', 'qtype_coderunner').then(function(s) {\n                    alert(s);\n                });\n                prototypeType.prop('disabled', true);\n                customise.prop('disabled', true);\n            }\n        }\n\n        checkForBrokenQuestion();\n        badQuestionLoad.prop('hidden'); // Until we check it once.\n        // Keep track of the current prototype loaded.\n        currentQtype = typeCombo.children('option:selected').text();\n\n        setCustomisationVisibility(isCustomised);\n        if (!isCustomised) {\n            // Not customised so have to load fields from prototype.\n            loadCustomisationFields();  // setUis is called when this completes.\n        } else {\n            setUis();  // Set up UI controllers on answer and answerpreload.\n            str.get_string('info_unavailable', 'qtype_coderunner').then(function(s) {\n                questiontypeHelpDiv.html(\"<p>\" + s + \"</p>\");\n            });\n        }\n\n        set_testtype_visibilities();\n\n        if (useace.prop('checked')) {\n            setUi('id_templateparams', 'ace');\n            setUi('id_uiparameters', 'ace');\n        }\n\n        loadUiParametersDescription();\n\n        // Set up event Handlers.\n\n        customise.on('change', function() {\n            let isCustomised = customise.prop('checked');\n            if (isCustomised) {\n                // Customisation is being turned on.\n                setCustomisationVisibility(true);\n            } else { // Customisation being turned off.\n                str.get_string('confirm_proceed', 'qtype_coderunner').then(function(s) {\n                    if (window.confirm(s)) {\n                        setCustomisationVisibility(false);\n                    } else {\n                        customise.prop('checked', true);\n                    }\n                });\n            }\n        });\n\n        acelang.on('change', check_ace_lang);\n        language.on('change', function() {\n            check_template_lang();\n            check_ace_lang();\n        });\n\n        typeCombo.on('change', function() {\n            if (customise.prop('checked')) {\n                // Author has customised the question. Ask if they want to reload inherited stuff.\n                str.get_string('question_type_changed', 'qtype_coderunner').then(function (s) {\n                    if (window.confirm(s)) {\n                        loadCustomisationFields();\n                    }\n                });\n            } else {\n                loadCustomisationFields();\n            }\n        });\n\n        useace.on('change', function() {\n            var isTurningOn = useace.prop('checked');\n            if (isTurningOn) {\n                setUi('id_template', 'ace');\n                setUi('id_templateparams', 'ace');\n                setUi('id_uiparameters', 'ace');\n            } else {\n                setUi('id_template', '');\n                setUi('id_templateparams', '');\n                setUi('id_uiparameters', '');\n            }\n        });\n\n        evaluatePerStudent.on('change', function() {\n            if (evaluatePerStudent.is(':checked')) {\n                langStringAlert('templateparamsusingsandbox');\n            }\n        });\n\n        uiplugin.on('change', function () {\n            setUis();\n            loadUiParametersDescription();\n        });\n\n        precheck.on('change', set_testtype_visibilities);\n\n        // Displays and hides the reason for the question type to be disabled.\n        // Also hides/shows the test cases section if prototype/not prototype.\n        prototypeType.on('change', function () {\n            if (prototypeType.prop('value') == '0') {\n                testsection.css('display', 'block');\n                prototypeDisplay.attr('hidden', '1');\n            } else {\n                testsection.css('display', 'none');\n                prototypeDisplay.removeAttr('hidden');\n            }\n        });\n\n        // In order to initialise the Ui plugin when the answer preload section is\n        // expanded, we monitor attribute mutations in the Answer Preload\n        // header.\n        var observer = new MutationObserver( function () {\n            setUis();\n        });\n        observer.observe(preloadHdr.get(0), {'attributes': true});\n\n        // Setup click handler for the buttons that allow users to replace the\n        // expected output  with the output got from testing the answer program.\n        $('button.replaceexpectedwithgot').click(function() {\n            var gotPre = $(this).prev('pre[id^=\"id_got_\"]');\n            var testCaseId = gotPre.attr('id').replace('id_got_', '');\n            $('#id_expected_' + testCaseId).val(gotPre.text());\n            $('#id_fail_expected_' + testCaseId).html(gotPre.text());\n            $('.failrow_' + testCaseId).addClass('fixed');  // Fixed row.\n            $(this).prop('disabled', true);\n        });\n\n        // On reloading the page, enable the typeCombo so that its value is POSTed.\n        $('.btn-primary').click(function() {\n            typeCombo.prop('disabled', false);\n        });\n    }\n\n    return {initEditForm: initEditForm};\n});"],"names":["define","$","ui","str","currentQtype","JSON_TO_FORM_MAP","template","iscombinatortemplate","value","cputimelimitsecs","memlimitmb","sandbox","sandboxparams","testsplitterre","splitter","replace","allowmultiplestdins","grader","resultcolumns","language","acelang","uiplugin","initEditForm","typeCombo","prototypeDisplay","evaluatePerStudent","globalextra","prototypeextra","useace","customise","isCombinator","testSplitterRe","allowMultipleStdins","customisationFieldSet","advancedCustomisation","isCustomised","prop","prototypeType","preloadHdr","courseId","questiontypeHelpDiv","precheck","testtypedivs","testsection","brokenQuestion","badQuestionLoad","uiparameters","setUi","taId","uiname","lang","uiWrapper","ta","document","getElementById","currentLang","attr","paramsJson","params","val","JSON","parse","err","toLowerCase","langs","i","indexOf","split","length","endsWith","substr","preferredAceLang","data","loadUi","InterfaceWrapper","setUis","answer","enableUi","enable_in_editor","error","alert","setCustomisationVisibility","isVisible","display","css","copyFieldsFromQuestionType","newType","response","formspecifier","attrval","isCombinatorEnabled","key","stateOn","taIds","restart","stop","enableAceInCustomisedFields","filter","get_string","then","s","title","coderunner_descr","html","resultHtml","questiontext","langStringAlert","extra","window","hasOwnProperty","behattesting","message","loadCustomisationFields","children","text","getJSON","M","cfg","wwwroot","qtype","courseid","sesskey","outcome","empty","success","loadUiParametersDescription","errorObject","questionType","errorMessage","reportError","currentType","oldtype","crtype","outputstring","extras","append","showLoadTypeError","fail","newUi","uiInfo","table","currentuiparameters","paramDescriptionDiv","showhidebutton","showdetails","header","uiparamstable","trim","hide","uiParamInfo","param","hdrs","columnheaders","UiParameterDescriptionTable","click","show","hidedetails","set_testtype_visibilities","check_ace_lang","removeAttr","messagePara","checkForBrokenQuestion","on","confirm","is","MutationObserver","observe","get","gotPre","this","prev","testCaseId","addClass"],"mappings":"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"}